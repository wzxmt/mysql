Redis 缓存技术
 
NoSQL 产品(key-value)
memcached
redis

1、Redis功能介绍
高速读写
数据类型丰富    （笔试、面试）	*****
支持持久化      （笔试、面试）	*****
多种内存分配及回收策略
支持事务	（面试）	****
消息队列、消息订阅 
支持高可用			****
支持分布式分片集群 （面试）	*****
缓存穿透\雪崩（笔试、面试）	*****
Redis API			**

2、企业缓存产品介绍
Memcached:
	优点：高性能读写、单一数据类型、支持客户端式分布式集群、一致性hash
	缺点：无持久化、节点故障可能出现缓存穿透、分布式需要客户端实现、跨机房数据同步困难、架构扩容复杂度高

Redis:	优点：高性能读写、多数据类型支持、数据持久化、高可用架构、支持自定义虚拟内存、支持分布式分片集群、单线程读写性能极高
	缺点：多线程读写较Memcached慢
	新浪、京东、直播类平台、网页游戏
	
memcache与redis在读写性能的对比

memcached 适合,多用户访问,每个用户少量的rw
redis     适合,少用户访问,每个用户大量rw				

Tair：
优点：高性能读写、支持三种存储引擎（ddb、rdb、ldb）、支持高可用、支持分布式分片集群、支撑了几乎所有淘宝业务的缓存。
缺点：单机情况下，读写性能较其他两种产品较慢
	
-------------------------
3、Redis使用场景介绍
Memcached：多核的缓存服务，更加适合于多用户并发访问次数较少的应用场景

Redis：单核的缓存服务，单节点情况下，更加适合于少量用户，多次访问的应用场景。
Redis一般是单机多实例架构，配合redis集群出现。

4、Redis安装部署：
下载：
wget http://download.redis.io/releases/redis-3.2.12.tar.gz
tar xzf redis-3.2.12.tar.gz
cd redis-3.2.12  && make

mkdir -p /usr/local/redis/{etc,bin,data}
mv redis.conf /usr/local/redis/etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-trib.rb redis-sentinel redis-check-aof redis-check-rdb redis-cli redis-server /usr/local/redis/bin/
启动：
redis-server &

环境变量：
echo 'export PATH=/usr/local/redis/bin:$PATH' >>/etc/profile 
source /etc/profile 
echo never > /sys/kernel/mm/transparent_hugepage/enabled

#启动
redis-server /usr/local/redis/etc/redis.conf
#连接
redis-cli 
127.0.0.1:6379> set num 10
OK
127.0.0.1:6379> get num
10
------------------------
5、Redis基本管理操作
5.1基础配置文件介绍：
vim /usr/local/redis/etc/redis.conf
daemonize yes
port 6379
logfile /usr/local/redis/etc/redis.log
dir /usr/local/redis/data
dbfilename dump.rdb

重启redis
redis-cli shutdown 
redis-server /usr/local/redis/etc/redis.conf 
netstat -lnp|grep 6379
+++++++++++配置文件说明++++++++++++++
redis.conf
是否后台运行：
daemonize yes
默认端口：
port 6379
日志文件位置
logfile /var/log/redis.log
持久化文件存储位置
dir /usr/local/redis/data
RDB持久化数据文件:
dbfilename dump.rdb
+++++++++++++++++++++++++
redis-cli 客户端命令常用参数说明

redis-cli 刚装完,可以在redis服务器上直接登录redis
-p 6379   指定端口号
-h        指定链接地址
-a        指定链接密码
#无交互执行redis命令
redis-cli  set num  10 
#批量执行
cat /tmp/1.txt |redis-cli

[root@supper ~]# redis-cli -h 10.0.0.20  -p 6379
10.0.0.20:6379>
-------------------------
5.2 redis安全配置
redis默认开启了保护模式，只允许本地回环地址登录并访问数据库。
禁止protected-mode
protected-mode yes/no （保护模式，是否只允许本地访问）
----------------------
(1)Bind :指定IP进行监听
vim /usr/local/redis/etc/redis.conf
bind 10.0.0.20  127.0.0.1

(2)增加requirepass  {password}
vim /usr/local/redis/etc/redis.conf
requirepass 123

----------验证-----
方法一：
redis-cli -a 123
方法二：
redis-cli
auth 123
-------------------------------------------
5.3 在线查看和修改配置
CONFIG GET *
CONFIG GET requirepass
CONFIG SET requirepass 123

-------------------------------------------
5.4 redis持久化（内存数据保存到磁盘）
作用:可以有效防止,在redis宕机后,缓存失效的问题.
RDB 持久化
可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。
    优点：速度快，适合于用做备份，主从复制也是基于RDB持久化功能实现的。
    缺点：会有数据丢失

rdb持久化核心配置参数：
vim /usr/local/redis/etc/redis.conf
dir /usr/local/redis/data
dbfilename dump.rdb
save 900 1
save 300 10
save 60 10000

配置分别表示：
900秒（15分钟）内有1个更改
300秒（5分钟）内有10个更改
60秒内有10000个更改

----------    
AOF 持久化(append-only log file)
	记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 
    AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。
    优点：可以最大程度保证数据不丢
    缺点：日志记录量级比较大
-------------
AOF持久化配置
always 每1个命令,都立即同步到aof 
everysec 每秒写1次,写入工作交给操作系统,由操作系统判断缓冲区大小,统一写入到aof

vim /usr/local/redis/etc/redis.conf
appendonly yes
appendfsync everysec 

面试： 
redis 持久化方式有哪些？有什么区别？
rdb：基于快照的持久化，速度更快，一般用作备份，主从复制也是依赖于rdb持久化功能
aof：以追加的方式记录redis操作日志的文件。可以最大程度的保证redis数据安全，类似于mysql的binlog

--------------------------------------------------------
6、Redis数据类型(笔试)：
6.1 介绍
String ：     字符类型
Hash：        字典类型
List：        列表     
Set：         集合 
Sorted set：  有序集合

---------------------------
键      值
key     value
key1     col1:value1  col2:value2 
key2     [a,b,c,d]  0 1 2 3		 		 
key3    (a,b,c,d)  10	 20   30  40 
key4     ( a,    b,   c,  d)   0     1    2   3
		   
6.2  键的通用操作
KEYS * 	 keys a  keys a*	                查看已存在所有键的名字   ****
TYPE				返回键所存储值的类型     ****
EXISTS 				检查是否存在             *****
EXPIRE \ PEXPIRE 			以秒\毫秒设定生存时间       ***
TTL \ PTTL 			以秒\毫秒为单位返回生存时间 ***
PERSIST 				取消生存实现设置            ***
DEL				删除一个key
RENAME 				变更KEY名

---例子：
127.0.0.1:6379> set name zhangsan 
127.0.0.1:6379> EXPIRE name 60
(integer) 1
127.0.0.1:6379> ttl name
(integer) 57
127.0.0.1:6379> set a b ex 60
OK
127.0.0.1:6379> ttl a
127.0.0.1:6379> PERSIST a
(integer) 1
127.0.0.1:6379> ttl a
(integer) -1

---------------------------------------------
6.3 string
----------
应用场景
常规计数：
微博数，粉丝数等。
订阅、礼物、页游
key:value
----------
（1）
 set name zhangsan 	
（2）
 MSET id 101 name zhangsan age 20 gender m
 等价于以下操作：
 set id 101 
 set name zhangsan 
 set age 20 
 set gender m
 
mget id name age gender

（3）计数器
每点一次关注，都执行以下命令一次
127.0.0.1:6379> incr fans_count
(integer) 10003
127.0.0.1:6379> get fans_count
"10003"
127.0.0.1:6379> incrby fans_count 1000
(integer) 11003
127.0.0.1:6379> decr fans_count 
(integer) 11002
127.0.0.1:6379> decrby  fans_count 1000

详细的例子：------------------------------------
增
set     mykey "test"   			    为键设置新值，并覆盖原有值
getset mycounter 0   			设置值,取值同时进行
setex  mykey 10 "hello"  		设置指定 Key 的过期时间为10秒,在存活时间可以获取value
setnx mykey "hello"   			若该键不存在，则为键设置新值
mset key3  "zyx"  key4 "xyz"  	批量设置键

删
del mykey  					     删除已有键

改
append mykey "hello"  			若该键并不存在,返回当前 Value 的长度
              				    该键已经存在，返回追加后 Value的长度
incr mykey   				    值增加1,若该key不存在,创建key,初始值设为0,增加后结果为1
decrby  mykey  5   			    值减少5
setrange mykey 20 dd  			把第21和22个字节,替换为dd, 超过value长度,自动补0

查  
exists mykey     				判断该键是否存在，存在返回 1，否则返回0
get mykey    				    获取Key对应的value
strlen mykey  				    获取指定 Key 的字符长度
ttl mykey     				    查看一下指定 Key 的剩余存活时间(秒数)
getrange mykey 1 20  			获取第2到第20个字节,若20超过value长度,则截取第2个和后面所有的
mget key3 key4   				批量获取键
---------------------------

6.4   hash类型

hash类型（字典类型）
应用场景：
存储部分变更的数据，如用户信息等。
最接近mysql表结构的一种类型

--------------
存数据：
hmset stu id 101 name zs age 18

id    name     age
101   zs      18

insert into stu(id,name,age) values (101,'zs',18);

取数据：
HMGET stu id name age     -----> select id,name,age from stu;
hgetall stu               ------> select * from stu;

将mysql中world.city表前10行数据导入redis


hmset city_1  id 1 name Kabul contrycode AFG district Kabol population  1780000 

select concat("hmset city_",id," id ",id," name ",name," countrycode ",countrycode," district ",district," population ",population) from world.city  into outfile '/tmp/hmset1.txt'

cat /tmp/hmset.txt |redis-cli -a 123


hmset city_1  id 1 name Kabul contrycode AFG district Kabol population  1780000 


---------------------更多的例子
增
hset myhash field1 "s"    
若字段field1不存在,创建该键及与其关联的Hashes, Hashes中,key为field1 ,并设value为s ，若存在会覆盖原value
hsetnx myhash field1 s    
若字段field1不存在,创建该键及与其关联的Hashes, Hashes中,key为field1 ,并设value为s， 若字段field1存在,则无效
hmset myhash field1 "hello" field2 "world   	一次性设置多个字段
删
hdel myhash field1   					删除 myhash 键中字段名为 field1 的字段
del myhash  						    删除键
改  
hincrby myhash field 1  				给field的值加1

查
hget myhash field1   					获取键值为 myhash,字段为 field1 的值
hlen myhash   						    获取myhash键的字段数量
hexists myhash field1     				判断 myhash 键中是否存在字段名为 field1 的字段
hmget myhash field1 field2 field3  		一次性获取多个字段
hgetall myhash   						返回 myhash 键的所有字段及其值
hkeys myhash  						    获取myhash 键中所有字段的名字
hvals myhash   						    获取 myhash 键中所有字段的值

---------------

LIST（列表）

应用场景

消息队列系统
比如sina微博:在Redis中我们的最新微博ID使用了常驻缓存，这是一直更新的。
但是做了限制不能超过5000个ID，因此获取ID的函数会一直询问Redis。
只有在start/count参数超出了这个范围的时候，才需要去访问数据库。
系统不会像传统方式那样“刷新”缓存，Redis实例中的信息永远是一致的。
SQL数据库（或是硬盘上的其他类型数据库）只是在用户需要获取“很远”的数据时才会被触发，
而主页或第一个评论页是不会麻烦到硬盘上的数据库了。


微信朋友圈：

127.0.0.1:6379> LPUSH wechat "today is nice day !"

127.0.0.1:6379> LPUSH wechat "today is bad day !"

127.0.0.1:6379> LPUSH wechat "today is good  day !"

127.0.0.1:6379> LPUSH wechat "today is rainy  day !"

127.0.0.1:6379> LPUSH wechat "today is friday !"

[e,d,c,b,a]
 0 1 2 3  4

127.0.0.1:6379> lrange wechat  0 0
1) "today is friday !"
127.0.0.1:6379> lrange wechat  0 1
1) "today is friday !"
2) "today is rainy  day !"
127.0.0.1:6379> lrange wechat  0 2
1) "today is friday !"
2) "today is rainy  day !"
3) "today is good  day !"
127.0.0.1:6379> lrange wechat  0 3
127.0.0.1:6379> lrange wechat  -2 -1
1) "today is bad day !"
2) "today is nice day !"


-----------------
增 
lpush mykey a b  			若key不存在,创建该键及与其关联的List,依次插入a ,b， 若List类型的key存在,则插入value中
lpushx mykey2 e  			若key不存在,此命令无效， 若key存在,则插入value中
linsert mykey before a a1  	在 a 的前面插入新元素 a1
linsert mykey after e e2   	在e 的后面插入新元素 e2
rpush mykey a b 			在链表尾部先插入b,在插入a
rpushx mykey e  			若key存在,在尾部插入e, 若key不存在,则无效
rpoplpush mykey mykey2   	将mykey的尾部元素弹出,再插入到mykey2 的头部(原子性的操作)
删
del mykey  				    删除已有键 
lrem mykey 2 a   			从头部开始找,按先后顺序,值为a的元素,删除数量为2个,若存在第3个,则不删除
ltrim mykey 0 2  			从头开始,索引为0,1,2的3个元素,其余全部删除
改
lset mykey 1 e   			从头开始, 将索引为1的元素值,设置为新值 e,若索引越界,则返回错误信息
rpoplpush mykey mykey  		将 mykey 中的尾部元素移到其头部
查
lrange mykey 0 -1  		    取链表中的全部元素，其中0表示第一个元素,-1表示最后一个元素。
lrange mykey 0 2    		从头开始,取索引为0,1,2的元素
lrange mykey 0 0    		从头开始,取第一个元素,从第0个开始,到第0个结束
lpop mykey          		获取头部元素,并且弹出头部元素,出栈
lindex mykey 6      		从头开始,获取索引为6的元素 若下标越界,则返回nil 

------------

SET 集合类型（join union）

应用场景：
案例：在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。
Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，
对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。

-------------
127.0.0.1:6379> sadd lxl pg1 pg2 songlaoban oldnie oldchen marong
(integer) 6
127.0.0.1:6379> sadd jnl baoqiang yufan oldchen songzhe
(integer) 4
127.0.0.1:6379> sadd jnl baoqiang yufan oldchen songzhe oldguo  alexdsb 
(integer) 2
127.0.0.1:6379> 
127.0.0.1:6379> smembers lxl
1) "pg2"
2) "pg1"
3) "oldnie"
4) "songlaoban"
5) "marong"
6) "oldchen"
127.0.0.1:6379> smembers jnl
1) "alexdsb"
2) "yufan"
3) "oldguo"
4) "songzhe"
5) "baoqiang"
6) "oldchen"
127.0.0.1:6379> 
127.0.0.1:6379> 
127.0.0.1:6379> 
127.0.0.1:6379> 
127.0.0.1:6379> SUNION lxl jnl
 1) "marong"
 2) "pg2"
 3) "pg1"
 4) "oldchen"
 5) "alexdsb"
 6) "yufan"
 7) "songlaoban"
 8) "baoqiang"
 9) "oldnie"
10) "songzhe"
11) "oldguo"
127.0.0.1:6379> SINTER lxl jnl
1) "oldchen"
127.0.0.1:6379> 
127.0.0.1:6379> SDIFF lxl jnl
1) "songlaoban"
2) "oldnie"
3) "pg1"
4) "pg2"
5) "marong"
127.0.0.1:6379> SDIFF  jnl lxl 
1) "alexdsb"
2) "yufan"
3) "songzhe"
4) "oldguo"
5) "baoqiang"

-----------------
增
sadd myset a b c  
若key不存在,创建该键及与其关联的set,依次插入a ,b,若key存在,则插入value中,若a 在myset中已经存在,则插入了 d 和 e 两个新成员。
删
spop myset  			尾部的b被移出,事实上b并不是之前插入的第一个或最后一个成员
srem myset a d f  		若f不存在, 移出 a、d ,并返回2
改
smove myset myset2 a    	将a从 myset 移到 myset2，
查
sismember myset a    		判断 a 是否已经存在，返回值为 1 表示存在。
smembers myset    		查看set中的内容
scard myset    			获取Set 集合中元素的数量
srandmember myset  		随机的返回某一成员
sdiff myset1 myset2 myset3  	1和2得到一个结果,拿这个集合和3比较,获得每个独有的值
sdiffstore diffkey myset myset2 myset3  	3个集和比较,获取独有的元素,并存入diffkey 关联的Set中
sinter myset myset2 myset3   			获得3个集合中都有的元素
sinterstore interkey myset myset2 myset3  把交集存入interkey 关联的Set中
sunion myset myset2 myset3   			获取3个集合中的成员的并集
sunionstore unionkey myset myset2 myset3  把并集存入unionkey 关联的Set中

--------------------

SortedSet（有序集合）
---------------
应用场景：
排行榜应用，取TOP N操作

这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，
这时候就需要我们的sorted set出马了，将你要排序的值设置成sorted set的score，将具体的数据设置成相应的value，
每次只需要执行一条ZADD命令即可。

--------------
127.0.0.1:6379> zadd topN 0 smlt 0 fskl 0 fshkl 0 lzlsfs 0 wdhbx 0 wxg 
(integer) 6
127.0.0.1:6379> ZINCRBY topN 100000 smlt
"100000"
127.0.0.1:6379> ZINCRBY topN 10000 fskl
"10000"
127.0.0.1:6379> ZINCRBY topN 1000000 fshkl
"1000000"
127.0.0.1:6379> ZINCRBY topN 100 lzlsfs
"100"
127.0.0.1:6379> ZINCRBY topN 10 wdhbx
"10"
127.0.0.1:6379> ZINCRBY topN 100000000 wxg
"100000000"

127.0.0.1:6379> ZREVRANGE topN 0 2 
1) "wxg"
2) "fshkl"
3) "smlt"
127.0.0.1:6379> ZREVRANGE topN 0 2 withscores
1) "wxg"
2) "100000000"
3) "fshkl"
4) "1000000"
5) "smlt"
6) "100000"
127.0.0.1:6379> 


--------------
增
zadd myzset 2 "two" 3 "three"   	添加两个分数分别是 2 和 3 的两个成员
删
zrem myzset one two  				删除多个成员变量,返回删除的数量
改
zincrby myzset 2 one  				将成员 one 的分数增加 2，并返回该成员更新后的分数
查 
zrange myzset 0 -1 WITHSCORES  		返回所有成员和分数,不加WITHSCORES,只返回成员
zrank myzset one   				    获取成员one在Sorted-Set中的位置索引值。0表示第一个位置
zcard myzset    					获取 myzset 键中成员的数量
zcount myzset 1 2   				获取分数满足表达式 1 <= score <= 2 的成员的数量
zscore myzset three  				获取成员 three 的分数
zrangebyscore myzset  1 2   			获取分数满足表达式 1 < score <= 2 的成员
#-inf 表示第一个成员，+inf最后一个成员
#limit限制关键字
#2  3  是索引号
zrangebyscore myzset -inf +inf limit 2 3  返回索引是2和3的成员
zremrangebyscore myzset 1 2   		删除分数 1<= score <= 2 的成员，并返回实际删除的数量
zremrangebyrank myzset 0 1  			删除位置索引满足表达式 0 <= rank <= 1 的成员
zrevrange myzset 0 -1 WITHSCORES   		按位置索引从高到低,获取所有成员和分数
#原始成员:位置索引从小到大
      one  0  
      two  1
#执行顺序:把索引反转
      位置索引:从大到小
      one 1
      two 0
#输出结果: two  
       one
zrevrange myzset 1 3  				获取位置索引,为1,2,3的成员
#相反的顺序:从高到低的顺序
zrevrangebyscore myzset 3 0  			获取分数 3>=score>=0的成员并以相反的顺序输出
zrevrangebyscore myzset 4 0 limit 1 2 	 获取索引是1和2的成员,并反转位置索引

======================================================================================================
自己测试:
取模
crc16()
月份分片
ER分片+mod
