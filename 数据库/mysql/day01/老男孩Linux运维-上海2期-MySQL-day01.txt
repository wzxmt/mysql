
====================================老男孩Linux运维-上海2期-MySQL-day01===================================
oldguo 

9年
DB:
Oracle  MySQL  Mongodb  Redis
OS:
AIX   Redhat

=======
淘宝:
LNT 
Mongodb:导航
ES:搜索应用
MySQL(AliSQL):用户数据\商品信息
Tair(redis\memcached):缓存,双11前两周,会将热点数据灌入缓存

=====================================================
17天:

MySQL 


Mongodb


redis


==============================
第一章    MySQL介绍

一、运维DBA工作内容：

初级DBA：
    安装配置，基本使用，基本故障处理
中级DBA：
体系结构、备份策略设计，故障恢复，基础高可用的运维（搭建、监控、故障处理、架构演变）、
基础优化（索引、执行计划、慢日志）
高级DBA：
高可用架构（设计、实施、运维）、高性能架构（读写分离，分库、分表，分布式）、
整体数据库优化（基于业务的SQL优化）
==========================================
二、老男孩Linux运维-MySQL课程框架
==========================================
1、MySQL简介及部署                  ***
2、MySQL体系结构                    ****
3、MySQL基础管理                    ****
4、SQL应用                          ***
5、Information_schema获取元数据     ***

==========================================
6、索引及执行计划                    *****
7、MySQL存储引擎                     ****
8、MySQL日志管理                     *****
9、MySQL备份与恢复                   *****
10、MySQL主从复制及架构演变          *****
==========================================
11、MySQL高可用架构                  ***           
12、MySQL高性能架构                  ***
13、MySQL优化                        ***
14、MySQL5.7及8.0高可用新特性       ***

==========================================
IT人员应该具备的职业素质(运维更加重视)

个人素养(和技术能力无关)
1、人品
2、严谨
3、细心
4、心态
5、熟悉操作系统
6、熟悉业务
业务:
产品功能
用户行为
7、熟悉行业
8、喜欢数据库

三、数据库管理系统
1、数据？              ----了解
2、数据库管理系统？    ----了解
更好存储数据,管理数据

3、RDBMS与NOSQL        ----熟悉
关系型数据库(RDBMS)
非关系型数据库(NOSQL)
    3.1 RDBMS和NoSQL基本特点
    3.2 产品介绍（熟悉）
        RDBMS：Oracle、MySQL、mssql（SQL Server）、PG（postgresql）
               数据安全性要求较高的应用场景
			二维表的形式组织存储数据(有清楚的行列结构)   
			   	   
        NoSQL：redis(键值)
			name:zhangsan 
		mongodb(文档)
			json   {
					id:1
					name:zhangsan
					}
		memcache、ES,  Hbase、neo4j
               针对性能要求较高，数据安全性要求不是太高的场景，一般是配合RDBMS使用的产品 			   
4、Oracle产品介绍
    Oracle：10g 11g 12c 18c    -----了解
	
    MySQL：5.6  5.7  8.0       -----熟悉
	
	主流版本:5.6   5.7

   版本选择行业潜规则:
			选择GA版本6-12月产品
			
    5.6.34   5.6.36   5.6.38
	当前版本已经用了2年了,没有出现过任何由于版本问题出现的不稳定情况
	升级是有风险的.所以暂时没有考虑升级.
    5.7.18   5.7.20 
    我们公司新上的项目使用了5.7.20这个版本中的高可用架构(MGR).

面试场景：
1、你对数据库熟悉吗，看你简历数据库会的挺多
2、那你们原来公司用的什么版本？

解：
（1）是啊，我主要负责的数据库方面的日常运维工作。
（2）我们公司使用的是5.6.38这个版本。
（3）为什么使用这个版本哪呢？
（4）因为，我们公司的业务系统是基于这个版本开发的，
（5）经过长时间的测试以及运行，没有发现明显异常，比较稳定
（6）基于应用的兼容性思考，我们暂时没有打算上5.7。
（7）但是我们已经准备好将来在必要的时候，更新为新版本
（8）我对5.7的新特性也比较了解。
=====================

5、MySQL获取与安装方式介绍

https://downloads.mysql.com/archives/community/


5.1.RPM、Yum：安装方便、安装速度快，无法定制           ---->了解
5.2.二进制：不需要安装，解压即可使用，不能定制功能     ---->熟悉
5.3.编译安装：可定制，安装慢。                         ---->熟悉
		5.5之前：./configure  make   make install
		5.5之后：cmake  gmake
5.4.先编译，然后制作rpm，制作yum库，然后yum安装。      ----->熟悉dd
		 简单、速度快、可定制，比较复杂 制作时间长
5.5.企业选择安装方式
		中小企业：以上方式都可以，运维偏向编译，dba偏向选择二进制。
		大型企业：可以选择4


6、源码编译安装MySQL

安装前准备
（1）克隆一个模板机器（使用centos6），克隆完做快照
（2）IP 10.0.0.51主机名db01
 (3)iptables   selinux
（3）下载好5.6.38
（4）安装依赖包
     yum  install  -y  ncurses-devel libaio-devel
（5）安装cmake
		yum install cmake -y
（6）创建用户
		useradd -s /sbin/nologin -M mysql
		id mysql

开始安装：
cd /server/tools/

ls -l mysql-5.6.38.tar.gz
尽量去官方下载

tar xf mysql-5.6.38.tar.gz
cd mysql-5.6.38

cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql-5.6.38 \
-DMYSQL_DATADIR=/application/mysql-5.6.38/data \
-DMYSQL_UNIX_ADDR=/application/mysql-5.6.38/tmp/mysql.sock \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
-DWITH_EXTRA_CHARSETS=all \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DWITH_FEDERATED_STORAGE_ENGINE=1 \
-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
-DWITH_ZLIB=bundled \
-DWITH_SSL=bundled \
-DENABLED_LOCAL_INFILE=1 \
-DWITH_EMBEDDED_SERVER=1 \
-DENABLE_DOWNLOADS=1 \
-DWITH_DEBUG=0

-----------------
cmake干了什么？
1、做了些预配置
2、影响了编译后的程序（编译过程会将cmake指定的配置信息硬编码到程序文件中）
    mysqld
    mysql
    mysql_install_db
    mysqldump
    mysqladmin
    mysqld_safe
    等。

-----------------

make && make install

---------------------

一套完整的数据库管理系统
从文件角度来讲：
1、软件部分------>/application/mysql-5.6.38
2、数据部分------>/application/mysql/data

--------------
升级（了解）：
以5.7.20为例
1、装新的软件5.7.20
2、软连接
3、升级数据
注：生产中一般选择迁移升级的方式（自己总结）
--------------------------------------------------
ln -s /application/mysql-5.6.38/ /application/mysql

--------------------------------------------------
rm -rf /etc/my.cnf*

初始化数据：
/application/mysql/scripts/mysql_install_db --basedir=/application/mysql/ --datadir=/application/mysql/data --user=mysql
修改软件路径归属：
chown -R mysql.mysql /application/mysql/
拷贝启动脚本到Sys-v模式目录：
cp support-files/mysql.server /etc/init.d/mysqld

chmod 700 /etc/init.d/mysqld

启动数据库：
/etc/init.d/mysqld start
查看端口号：
netstat -lntup|grep 330

echo 'PATH=/application/mysql/bin/:$PATH' >>/etc/profile

tail -1 /etc/profile

source /etc/profile 

echo $PATH
mysql

----------
安装完成之后设置密码（设定root的密码）
mysqladmin password 123

或者
mysqladmin -uroot -p password oldboy123
Enter password:旧密码


---------后面讲-----
清理用户及无用数据库(基本优化)
select user,host from mysql.user;
drop user ''@'db02';
drop user ''@'localhost';
drop user 'root'@'db02';
drop user 'root'@'::1';
select user,host from mysql.user;
drop database test;
show databases;
密码忘记咋办？
---------------------
体系结构

目的：清楚数据库的工作机制和功能

C/S
mysql数据库管理系统构成：
从深层次理解
1、实例：
mysqld后台守护进程（boss）+
线程（master thread秘书+Read thread（A部门） +
write thread（B部分））+预分配的内存空间
数据库管理系统=实例+数据

2、数据
mysqld守护进程的构成及原理
select user,host,password from mysql.user;
mysql -uroot -p123 

------------------
mysqld 作为实例中最核心的组成
1、mysqld是一个守护进程，但本身不能自主启动


----------------------------------------

例子：
mysql -uroot -p123 
select user,host,password from mysql.user;


----------------------------------------

连接层功能
1、提供通信协议
    TCP/IP
    socket
2、用户验证
    用户的合法性：用户名（user+host）、密码(password)------->mysql.user
3、master thread分配一个专用线程（A thread）接收后续的用户请求（查询），但并没有能力直接处理SQL，会将接收到
SQL，转给SQL层继续处理

SQL层
1、接收上层转发过来的SQL。
2、语法检查
3、语义检查（检查是什么类型的SQL），以Select为例，检查到时一个DQL，交给专用的解析器
注：SQL主要包含：DCL、DDL、DML、DQL
3.1、权限验证
4、解析器将SQL解析成SQL接口能够识别方式（执行计划explain），解析完成后，交给执优化器进行优化
5、优化器，做判断，选择一个他认为成本最低执行计划，交给执行器
6、执行器执行explain，生成执行结果（去将A个数据文件的第N个数据页把我需要的数据给我取出来）
7、把执行结果交给下层（存储引擎层）继续处理
8、查询缓存（query_cache）
存储引擎层
1、接收上层的执行结果
2、取出磁盘文件的相应数据
3、返回给SQL层，结构化之后（生成表格），由专用线程 A thread，返回给客户端

--------------
select user,password from mysql.user where id=1;  hash运算后的结果+存储引擎层返回的结果放到缓存中
select user,password from mysql.user where id=2;

-------------

MySQL的逻辑结构（抽象结构）


MySQL物理结构（如何使用磁盘）

-------------

作业：
1、复习安装，并且完成编译后制作rpm
2、mysql5.7.20二进制包的安装部署，有能力的话安装编译版本
3、mysqld的三层结构的功能
4、预习day02



















