上集回顾:

备份恢复

备份的类型:
逻辑备份:基于SQL的备份
物理备份:基于磁盘的数据文件的备份

备份策略:
全备:备份所有数据
增量:基于上一次备份的变化的数据
二进制日志备份

备份的方式:
热备: 在数据库正常运行时进行备份
mysqldump:对于innodb表,开启一个专门的备份事务,基于时间点的快照进行热备.
xtrabackup:对于innodb表,备份数据页时,会将备份过程中的redo和undo记录下来,
在恢复时模拟CSR过程,将数据和日志恢复到一致状态,即可恢复数据
温备: 锁表备份
冷备: 业务不运行时进行备份


备份命令的使用:
mysqldump
-u -p  -S -h  -P  
-A   -B 
--triggers  -R 
--master-data=2 
--single-transaction

set sql_log_bin=0
source /tmp/full.sql


xtrabackup

全备:
innobackupex   --user=root --password=123 --no-timestamp /backup/full 

准备备份:
innobackupex --apply-log /backup/full



增量:
innobackupex   --user=root --password=123 --no-timestamp --incremental-basedir=/backup/full --incremental /backup/inc1

1 全备准备
innobackupex --apply-log --redo-only  /backup/full

2 第一次增量的合并并准备

innobackupex --apply-log --redo-only --incremental-dir=/backup/inc1  /backup/full 

3 最后一次增量合并准备

innobackupex --apply-log  --incremental-dir=/backup/inc2  /backup/full 

4 innobackupex --apply-log  /backup/full

单独恢复表

alter  table  t1 discard tablespace;
alter  table  t1 import tablespace;


=============================================
主从复制:
1、二进制日志管理回顾
2、传统备份方案回顾及缺陷
3、主从复制简介
4、主从复制原理       		******
5、主从复制搭建实践   		****
6、主从复制状态监控   		******
7、主从复制基本故障处理 	******
8、主从复制的架构演变      ***
9、多级主从架构实践        ***
10、主主复制实践		    ****
11、主从复制高级功能       *****
12、新特性GTID             *****

=======================
铺垫：
数据库损坏？
物理损坏（天灾人祸）？
坏道、磁头、磁盘、文件系统损坏只读 格式化  dd 、数据文件（删除、头部损坏、坏页）。

逻辑损坏（大部分人为的）？
误删除、误修改。

高可用？
业务7*24小时不间断提供服务。

企业架构方案:

(1) 负载均衡 LB:分担负载,偏向于性能,也有一定的高可用性

(2)主备系统(HA) :KA, 主从复制衍生架构(MHA,Mycat)   

(3)真正高可用架构系统(无切换动作,多活系统)
MySQL  5.7 ,8.0  InnoDB Cluster 
MySQL  NDB Cluster  
Oracle RAC    
Sybase CLuseter		

====================	
全年高可用率(无故障率)		
                       
99.9          365*24*60*0.1=52560分钟=876小时
99.99		  365*24*60*0.01=5256
99.999		  365*24*60*0.001=525.6
99.9999		  365*24*60*0.0001=52.56
99.99999      365*24*60*0.0001=5.256


------------------------------------------

主从复制引入:


1. 二进制日志知识回顾:
二进制日志在哪？如何设置位置和命名？
server_id 
log_bin
binlog_format
二进制日志记录什么？
数据库变更类语句,以事件的形式记录
二进制日志格式是怎样的？
binlog_format=row
二进制日志如何滚动？
二进制日志用来干嘛？
数据恢复
主从复制
二进制日志的操作命令？
show master status ;

2. 备份恢复  
业务系统的最后一道防线,数据量级大的情况下,需要较长时间来恢复


3. 主从复制存在的原因
3.1 辅助备份
解决物理损坏

3.2 演变高可用架构
在主库发生故障时,自动进行故障转移,对于应用透明

3.3 演变为高性能架构
读写分离
分布式






主从复制 Replication(重要@！！！！！！)

1、介绍
基于主库二进制日志实时恢复到备库。


2、原理

(1)前提:
2.1 多台节点
2.2 server_id要不同
2.3 主库开启binlog

2.4 主库提供复制用户
grant replication slave on *.* to repl@'10.0.0.%' identified by '123';
2.5 从库需要"补课":通过备份主库,恢复到从库

2.6 通知从库:复制使用的 用户,密码,IP,port ,复制的文件和起点
change master to

2.7 开启复制
start  slave;

(2)工作原理

文件: 
M:
	binlog:记录主库的数据变化
S:  
	relaylog:中继日志,存储从主库请求的二进制日志的存储位置
	master.info:存储用户,密码,IP,port,记录上次请求过的binlog位置
	relay-log.info:记录了上次SQL线程执行过的relaylog的位置点

线程:

M:
	dump(IO)thread(投递线程): 
	主库发从二进制日志给从库的线程

S:
	IO thread:
	请求binlog,接收binlog的线程
	SQL thread:
	执行relay日志的线程

主从复制原理文字说明:

1. 
(1)从库IO线程,查看master.info信息,获取IP,port,user,password,file,pos
(2)通过 IP,port,user,password,连接到主库.
(3)拿着 file(mysql-bin.000003),pos(120),请求主库
2.主库判断如果有新的binlog(mysql-bin.000003,800)
3.通过Dump线程读取binlog,从3号文件的120开始发送二进制日志事件
4.从库IO线程,接收binlog日志
5.缓存binlog到TCPIP缓存	
6.IO线程回复一个ACK确认给dump线程,主库收到后,主库此次复制工作就完成了.
7.更新master.info文件,file,pos被更新为最新请求的值
8.TCPIP缓存数据,写入relay-log中
9.SQL线程,读取relay-log.info,获取到上次已经执行过的位置信息
10.到relay-log找最新的日志进行执行
11.再次更新relay-log.info
12.已经应用过的relay-log,会被自动清理


3.主从复制搭建
略.



4.主从复制监控


从库:
show slave status\G
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 10.0.0.51
                  Master_User: repl
                  Master_Port: 3307
                Connect_Retry: 10
              Master_Log_File: mysql-bin.000003
          Read_Master_Log_Pos: 120
               Relay_Log_File: db01-relay-bin.000008
                Relay_Log_Pos: 283
        Relay_Master_Log_File: mysql-bin.000003
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes


主库:
show processlist;
show master status ;

master.info记录的:
Master_Host: 10.0.0.51
Master_User: repl
Master_Port: 3307
Connect_Retry: 10

Master_Log_File: mysql-bin.000003
Read_Master_Log_Pos: 248
以上两行,结合主库的show master status;


relay-log.info 内容

Relay_Log_File: db01-relay-bin.000008
Relay_Log_Pos: 411

以下内容,反应的时从库的relay日志文件对应着主库的binlog文件名
Relay_Master_Log_File: mysql-bin.000003


从库线程状态:
Slave_IO_Running: Yes
Slave_SQL_Running: Yes

(1)启动和关闭两个线程
stop  slave;
start slave;
(2)单独启动关闭一个线程
stop  slave io_thread;
stop  slave sql_thread;


监控线程具体报错信息
Last_IO_Errno: 0
Last_IO_Error: 
Last_SQL_Errno: 0
Last_SQL_Error: 


4、 主从复制故障

4.1 IO线程故障

作用及故障原因:
(1)连接master
user ,password ,ip ,port
网络不通,防火墙
master没启动
master连接数上限
master压力太大
skip-name-resolve(主从在一台机器)

例子:模拟故障
从库:
stop slave;
reset slave all;

查看主库binlog位置信息
show master status;
| mysql-bin.000003 |      248 |

从库重新构建主从
CHANGE MASTER TO
  MASTER_HOST='10.0.0.51',
  MASTER_USER='repl',
  MASTER_PASSWORD='1234',
  MASTER_PORT=3307,
  MASTER_LOG_FILE='mysql-bin.000003',
  MASTER_LOG_POS=248,
  MASTER_CONNECT_RETRY=10;
  
处理过程:
stop slave;
reset slave all;
CHANGE MASTER TO
  MASTER_HOST='10.0.0.51',
  MASTER_USER='repl',
  MASTER_PASSWORD='123',
  MASTER_PORT=3307,
  MASTER_LOG_FILE='mysql-bin.000003',
  MASTER_LOG_POS=248,
  MASTER_CONNECT_RETRY=10;
  
 start slave;

 
客户案例:
10:00 时刻IO线程故障:
 1. show slave  status\G 
 IO故障 
 记录故障时间点的获取到主库日志信息
Master_Log_File: mysql-bin.000003
Read_Master_Log_Pos: 248

2.处理故障
stop slave;
reset slave all;
CHANGE MASTER TO
  MASTER_HOST='10.0.0.51',
  MASTER_USER='repl',
  MASTER_PASSWORD='123',
  MASTER_PORT=3307,
  MASTER_LOG_FILE='mysql-bin.000003',
  MASTER_LOG_POS=248,
  MASTER_CONNECT_RETRY=10;
  
start slave;

 
(2)请求,接收binlog 


(3)日志写入relay-log 
(4)读写master.info




4.2 SQL线程故障





4.3 主从复制延时过高





IO：
1、连接主库 
(1)user password ip   prot
(2) 网络问题：不通   延时高   防火墙 
2、请求binlog
binlog 不存在或 损坏


3、更新relay 和master.info
存放在哪？


SQL：

relay log  文件 出问题

1、create 时   对象已存在
2、对于 insert update  delete  drop  truncate alter  对象不存在
3、约束问题  数据类型  列属性

从库被写入的时

--------------------------
处理方法：
stop slave; #<==临时停止同步开关。
set global sql_slave_skip_counter = 1; #<==将同步指针向下移动一个，如果多次不同步，可以重复操作。

start slave;
/etc/my.cnf
slave-skip-errors = 1032,1062,1007

但是，以上操作有时是有风险的，最安全的做法就是重新构建主从。

-----------------------------

怎么预防以上问题？
从库加入配置文件
read_only=1           ---->只能控制普通用户

--------------------------------------------------------------
普通的主从复制可能存在不足

1、 逻辑损坏怎么办？
2、 不能保证主库做的操作，从库一定能做。
3、 高可用？自动Failover
4、 过滤复制
---------------------
主从复制――delayed（延时从库）

会专门找一个节点，配置成延时节点，尽可能防止逻辑损坏，一般情况下这个节点会被用备份
我们配置的是SQL_thread的延时
生产环境中一般设置在3-6小时。


mysql>stop slave;

mysql>CHANGE MASTER TO MASTER_DELAY = 300;

mysql>start slave;

mysql> show slave status \G
SQL_Delay: 300


如何使用延时从库，解决数据库逻辑损坏？
模拟故障：

1、连接到主库,误删除

mysql -uroot -p123 -S /data/3307/mysql.sock
drop database ffd;


2、停止主库
mysqladmin -uroot -p123 -S /data/3307/mysql.sock shutdown 

3、停止从库SQL线程
stop slave sql_thread;
4、截取relay-log到drop之前的位置
4.1 起始点获取
[root@db01 data]# cat relay-log.info 
./db01-relay-bin.000003
378
4.2 结束点
mysql> show relaylog events in 'db01-relay-bin.000003';
mysqlbinlog --start-position=378 --stop-position=473  db01-relay-bin.000003 >/tmp/relay.sql

5、恢复数据
mysql> set sql_log_bin=0;
mysql> source /tmp/relay.sql

6、从库替代主库

mysql -uroot -p123 -S /data/3308/mysql.sock
stop slave;
reset slave all;

------------------------------------
半同步复制
出发点是保证主从数据一致性的问题，安全的考虑

5.5 出现的概念，但是不建议使用，性能太差

5.6以后出现group commit 组提交功能，来提升开启版同步复制的性能

5.7  更加完善了，在group commit基础上出现了MGR

5.7的增强半同步复制的新特性：after commit;  after sync;

------
加载插件

主:
INSTALL PLUGIN rpl_semi_sync_master SONAME 'semisync_master.so';

从:
INSTALL PLUGIN rpl_semi_sync_slave SONAME 'semisync_slave.so';
查看是否加载成功:
show plugins;

启动:
主:
SET GLOBAL rpl_semi_sync_master_enabled = 1;

从:
SET GLOBAL rpl_semi_sync_slave_enabled = 1;

重启从库上的IO线程
STOP SLAVE IO_THREAD;
START SLAVE IO_THREAD;


查看是否在运行
主:
show status like 'Rpl_semi_sync_master_status';
从:
show status like 'Rpl_semi_sync_slave_status';



Classic Replication
-----------------------------------
Failover（故障转移）问题？
1、监控问题？ 主机、mysql实例
2、处理里的问题，需要人为
3、数据补偿---->GTID


-----------------
描述环境：
1、1主2从的wordpress 生产环境，（db01(M)  db02(s1)  db03(s2)）
2、wordpress应用默认是连接到db01这个主库的
3、db01宕机
4、wordpress应用是没有能力和责任监控到db01宕机。
5、人为的实时监控到db01宕机。
6、选择一个新的主库（New Master）,原则更加接近主库数据状态的从库
7、选择方法：在每个从库重运行：
		show slave status\G 
		Master_Log_File: mysql-bin.000005
        Read_Master_Log_Pos: 120
8、假设s1从库被选为新主库，需要进行数据补偿。
8.1如果能通过ssh连接上主库，
(1)立即保存缺失部分的二进制日志
(2)s2做同样的操作即可
8.2 如果不能ssh到主库
(1)计算s2和s1之间的relay-log的差异日志（在传统的复制环境中，可能需要比较复杂的对比过程）
所以我们可以考虑使用GTID方式构建主从，主库发生的所有事务都会打上一个唯一的标标签，而且是全局
唯一的。基于GTID全局唯一的特性，很容易判断s1和s2 relay-log数据差异。
（2）S2 获取差异部分的relay-log日志，恢复到当前库，两个从库之间的数据就一致了。	
9、s2重新指向（change master to 到s1）s1
---------------------------------------------

GTID
GTID(Global Transaction ID)是对于一个已提交事务的编号，并且是一个全局唯一的编号。
它的官方定义如下：
GTID = source_id ：transaction_id
7E11FA47-31CA-19E1-9E56-C43AA21293967:29
什么是sever_uuid，和Server-id 区别？

-----------------
重要参数：
gtid-mode=on
enforce-gtid-consistency=true
log-slave-updates=1


gtid-mode=on						--启用gtid类型，否则就是普通的复制架构
enforce-gtid-consistency=true		--强制GTID的一致性
log-slave-updates=1					--slave更新是否记入日志
change?master?to?master_host=‘10.0.0.51’,master_user=‘repl‘,master_password=‘123’?,MASTER_AUTO_POSITION=1?;

++++++++++
GTID复制配置过程：

1、清理环境

 \rm -rf /application/mysql/data/*
 \rm -rf /data/mysql/*


2、准备配置文件


主库db01：
加入以下配置信息

vim  /etc/my.cnf
[mysqld]
basedir=/application/mysql
datadir=/application/mysql/data
socket=/tmp/mysql.sock
log-error=/var/log/mysql.log
log_bin=/data/mysql/mysql-bin
binlog_format=row
skip-name-resolve
server-id=51
gtid-mode=on
enforce-gtid-consistency=true
log-slave-updates=1
[client]
socket=/tmp/mysql.sock


slave1(db02)：

vim  /etc/my.cnf
[mysqld]
basedir=/application/mysql
datadir=/application/mysql/data
socket=/tmp/mysql.sock
log-error=/var/log/mysql.log
log_bin=/data/mysql/mysql-bin
binlog_format=row
skip-name-resolve
server-id=52
gtid-mode=on
enforce-gtid-consistency=true
log-slave-updates=1
[client]
socket=/tmp/mysql.sock

slave2(db03)：
 vim    /etc/my.cnf
[mysqld]
basedir=/application/mysql
datadir=/application/mysql/data
socket=/tmp/mysql.sock
log-error=/var/log/mysql.log
log_bin=/data/mysql/mysql-bin
binlog_format=row
skip-name-resolve
server-id=53
gtid-mode=on
enforce-gtid-consistency=true
log-slave-updates=1
[client]
socket=/tmp/mysql.sock
-----------------
3、初始化数据
/application/mysql/scripts/mysql_install_db --user=mysql --basedir=/application/mysql  --datadir=/application/mysql/data/ 
 

4、启动数据库
/etc/init.d/mysqld start

-----------------
5、构建主从：
master:51
slave:52,53

51:
grant replication slave  on *.* to repl@'10.0.0.%' identified by '123';


52\53:
change master to master_host='10.0.0.51',master_user='repl',master_password='123' ,MASTER_AUTO_POSITION=1;
start slave;

-----------------------------

GTID 从库误写入操作  处理

注入空事物的方法：
stop slave;
set gtid_next='8c49d7ec-7e78-11e8-9638-000c29ca725d:2';
begin;commit;
set gtid_next='AUTOMATIC';
start slave;
这里的xxxxx:N 也就是你的slave sql thread报错的GTID，或者说是你想要跳过的GTID。

最好的解决方案：重新构建主从环境

-----------------------------

1、 Classic Replication  不足

（1）监控问题？ 主机、mysql实例
（2）处理里的问题，需要人为
（3）数据补偿---->GTID

2、介绍 GTID
auto.cnf

3、GTID 复制和普通复制的区别
（0）在主从复制环境中，主库发生过的事务，在全局都是由唯一GTID记录的，更方便Failover
（1）额外功能参数（3个）
（2）change master to 的时候不再需要binlog 文件名和position号
（3）在复制过程中，从库不再依赖master.info文件，而是直接读取最后一个relaylog的 GTID号
（4） mysqldump备份时，默认会将备份中包含的事务操作，以以下方式
	SET @@GLOBAL.GTID_PURGED='8c49d7ec-7e78-11e8-9638-000c29ca725d:1';
	告诉从库，我的备份中已经有以上事务，你就不用运行了，直接从下一个GTID开始请求binlog就行。



