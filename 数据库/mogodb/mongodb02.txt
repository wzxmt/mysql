Mongodb核心技术

第一章：逻辑结构

Mongodb 逻辑结构             			 MySQL逻辑结构
库database							        库
集合（collection）							表
文档（document）							数据行


第二章：安装部署
1、系统准备
（1）redhat或cnetos6.2以上系统
（2）系统开发包完整
（3）ip地址和hosts文件解析正常
（4）iptables防火墙&SElinux关闭
（5）关闭大页内存机制
########################################################################
root用户下
在vi /etc/rc.local最后添加如下代码
if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
  echo never > /sys/kernel/mm/transparent_hugepage/enabled
fi
if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
   echo never > /sys/kernel/mm/transparent_hugepage/defrag
fi
		
其他系统关闭参照官方文档：	

https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/
---------------
为什么要关闭？
Transparent Huge Pages (THP) is a Linux memory management system 
that reduces the overhead of Translation Lookaside Buffer (TLB) 
lookups on machines with large amounts of memory by using larger memory pages.
However, database workloads often perform poorly with THP, 
because they tend to have sparse rather than contiguous memory access patterns. 
You should disable THP on Linux machines to ensure best performance with MongoDB.
############################################################################	

修改  vim /etc/security/limits.conf
#*               -       nofile          65535

--------------------------------------------------------------

2、mongodb安装
（1）创建所需用户和组
groupadd -g 800 mongod
useradd -u 801 -g mongod mongod
passwd mongod
（2）创建mongodb所需目录结构
mkdir -p /mongodb/{bin,conf,log,data}

（3）上传并解压软件到指定位置

上传到：
cd   /server/tools/
解压：
tar xf mongodb-linux-x86_64-rhel70-3.2.16.tgz

拷贝目录下bin程序到/mongodb/bin
cp -a /server/tools/mongodb-linux-x86_64-rhel70-3.2.16/bin/* /mongodb/bin

（4）设置目录结构权限

chown -R mongod. /mongodb

（5）设置用户环境变量

su - mongod
vi .bash_profile
export PATH=/mongodb/bin:$PATH
source .bash_profile


（6）启动mongodb
mongod --dbpath=/mongodb/data --logpath=/mongodb/log/mongodb.log --port=27017 --logappend --fork 

（7）登录mongodb
[mongod@server2 ~]$ mongo

注：连接之后会有warning，需要修改(使用root用户)
vim /etc/security/limits.conf 
#*       -       nofile       65535 

reboot重启生效



（8）使用配置文件

vim /mongodb/conf/mongodb.conf

logpath=/mongodb/log/mongodb.log
dbpath=/mongodb/data 
port=27017
logappend=true
fork=true

+++++++++++++++++++
关闭mongodb
mongod -f /mongodb/conf/mongodb.conf --shutdown
使用配置文件启动mongodb
mongod -f /mongodb/conf/mongodb.conf


（YAML模式：）
--
NOTE：
YAML does not support tab characters for indentation: use spaces instead.


--系统日志有关  
systemLog:
   destination: file        
   path: "/mongodb/log/mongodb.log"    --日志位置
   logAppend: true					   --日志以追加模式记录

--数据存储有关   
storage:
   journal:
      enabled: true
   dbPath: "/mongodb/data"            --数据路径的位置
   
 -- 进程控制  
processManagement:
   fork: true                         --后台守护进程
   pidFilePath: <string>	     --pid文件的位置，一般不用配置，可以去掉这行，自动生成到data中
   
   
--网络配置有关   
net:			
   bindIp: <ip>                       -- 监听地址，如果不配置这行是监听在0.0.0.0
   port: <port>						  -- 端口号,默认不配置端口号，是27017
   
-- 安全验证有关配置      
security:
  authorization: enabled              --是否打开用户名密码验证
  
  
  
------------------以下是复制集与分片集群有关----------------------  

replication:
 oplogSizeMB: <NUM>
 replSetName: "<REPSETNAME>"
 secondaryIndexPrefetch: "all"
sharding:
   clusterRole: <string>
   archiveMovedChunks: <boolean>
   
   
---for mongos only
replication:
   localPingThresholdMs: <int>

sharding:
   configDB: <string>
---
.........
++++++++++++++++++++++
YAML例子
vim /mongodb/conf/mongo.conf
systemLog:
   destination: file
   path: "/mongodb/log/mongodb.log"
   logAppend: true
storage:
   journal:
      enabled: true
   dbPath: "/mongodb/data/"
processManagement:
   fork: true
net:
   port: 27017
   
   
   
mongod -f /mongodb/conf/mongo.conf --shutdown
mongod -f /mongodb/conf/mongo.conf   

++++++++++++++++++++++


（9）mongodb的关闭方式
mongod -f mongodb.conf  --shutdown

---------------------------------------

3、mongodb常用基本操作

3.0 
mongodb 默认存在的库
test:登录时默认存在的库
管理mongodb有关的系统库
admin库:系统预留库,mongodb系统管理库
local库:本地预留库,存储关键日志



3.1 命令种类
数据库对象(库(database),表(collection),数据行(document))
db.命令:
DB级别命令
db.[TAB]  类似于linux中的tab功能
db.help() db级别的命令使用帮助

collection级别操作
db.Collection_name.xxx
document级别操作:
db.t1.insert()


复制集有关(replication set):
rs.

分片集群(sharding cluster)
sh.


3.2、帮助
help
KEYWORDS.help()
KEYWORDS.[TAB]


show 
use 
db.help()
db.a.help()
rs.help()
sh.help()


3.3 、常用操作

--查看当前db版本
test> db.version()

--显示当前数据库

test> db
test
或
> db.getName()
test

--查询所有数据库
test> show dbs

– 切换数据库
> use local
switched to db local

- 查看所有的collection
show  tables;

– 显示当前数据库状态
test> use local
switched to db local

local> db.stats()


– 查看当前数据库的连接机器地址


> db.getMongo()
connection to 127.0.0.1
指定数据库进行连接
默认连接本机test数据库




------------------------------------------------
4、mongodb对象操作：

mongo         mysql
库    ----->  库
集合  ----->  表
文档  ----->  数据行


4.1 库的操作：

– 创建数据库：
当use的时候，系统就会自动创建一个数据库。
如果use之后没有创建任何集合。
系统就会删除这个数据库。

– 删除数据库
如果没有选择任何数据库，会删除默认的test数据库
//删除test数据库

test> show dbs
local 0.000GB
test 0.000GB

test> use test
switched to db test
test> db.dropDatabase()
{ "dropped" : "test", "ok" : 1 }



集合的操作：
 创建集合
方法1
admin> use app
switched to db app
app> db.createCollection('a')
{ "ok" : 1 }
app> db.createCollection('b')
{ "ok" : 1 }
> show collections //查看当前数据下的所有集合
a b 或
> db.getCollectionNames()
[ "a", "b" ]



方法2：当插入一个文档的时候，一个集合就会自动创建。

 use oldboy
 db.test.insert({name:"zhangsan"})
 db.stu.insert({id:101,name:"zhangsan",age:20,gender:"m"})
 show tables;
 db.stu.insert({id:102,name:"lisi"})
 db.stu.insert({a:"b",c:"d"})
 db.stu.insert({a:1,c:2})


查询数据:
> db.stu.find({}).pretty()
db.stu.find({id:101}).pretty();
{
	"_id" : ObjectId("5b470168cfdebc16a5a82a97"),
	"id" : 101,
	"name" : "zhangsan",
	"age" : 20,
	"gender" : "m"
}


删除集合
app> use app
switched to db app

app> db.log.drop() //删除集合

– 重命名集合
//把log改名为log1
app> db.log.renameCollection("log1")
{ "ok" : 1 }
app> show collections
a b c
log1
app


批量插入数据
for(i=0;i<10000;i++){db.log.insert({"uid":i,"name":"mongodb","age":6,"date":new
Date()})}



Mongodb数据查询语句:

– 查询集合中的记录数
app> db.log.find() //查询所有记录

注：默认每页显示20条记录，当显示不下的的情况下，可以用it迭代命令查询下一页数据。
设置每页显示数据的大小：

> DBQuery.shellBatchSize=50; //每页显示50条记录

app> db.log.findOne() //查看第1条记录
app> db.log.count() //查询总的记录数

– 删除集合中的记录数
app> db.log.remove({}) //删除集合中所有记录
> db.log.distinct("name") //查询去掉当前集合中某列的重复数据


– 查看集合存储信息
app> db.log.stats()
app> db.log.dataSize() //集合中数据的原始大小
app> db.log.totalIndexSize() //集合中索引数据的原始大小
app> db.log.totalSize() //集合中索引+数据压缩存储之后的大小
app> db.log.storageSize() //集合中数据压缩存储的大小


------------------------
5、用户管理 *****
注意：
验证库，建立用户时use到的库，在使用用户时，要加上验证库才能登陆。
对于管理员用户,必须在admin下创建.


use admin 
mongo 10.0.0.51/admin

db.createUser

{
    user: "<name>",
    pwd: "<cleartext password>",
    roles: [
       { role: "<role>",
     db: "<database>" } | "<role>",
    ...
    ]
}

基本语法说明：

user:用户名
pwd:密码
roles:
    role:角色名
    db:作用对象
	
role：root, dbAdmin,readWrite,read   

验证数据库：


mongo -u oldboy -p 123 10.0.0.51/oldboy
总结：
1、在创建普通用户时，一般事先use 到想要设置权限的库下；或者所有普通用户使用同一个验证库，比如test
2、root角色的创建，要在admin下进行创建
3、创建用户时你use到的库，在将来登录时候，使用以下方式登录,否则是登录不了的

-------------
用户管理例子：

（1）--创建超级管理员：管理所有数据库（必须use admin再去创建）

$ mongo

use admin

db.createUser(
{
    user: "root",
    pwd: "root123",
    roles: [ { role: "root", db: "admin" } ]
}
)


验证用户
db.auth('root','root123')


配置文件中，加入以下配置
security:
  authorization: enabled

重启mongodb
mongod -f /mongodb/conf/mongo.conf --shutdown 
mongod -f /mongodb/conf/mongo.conf 

登录验证
mongo -uroot -proot123  admin

mongo -uroot -proot123  10.0.0.51/admin


或者
mongo
use admin
db.auth('root','root123')


查看用户:
use admin
db.system.users.find().pretty()



==================

2、创建库管理用户
mongo -uroot -proot123  admin

use app

db.createUser(
{
user: "admin",
pwd: "admin",
roles: [ { role: "dbAdmin", db: "app" } ]
}
)

db.auth('admin','admin')


登录测试
mongo -uadmin -padmin 10.0.0.51/app


3、创建对app数据库，读、写权限的用户app01：

（1）超级管理员用户登陆
mongo -uroot -proot123 admin

（2）选择一个验证库

use app

(3)创建用户
db.createUser(
	{
		user: "app01",
		pwd: "app01",
		roles: [ { role: "readWrite" , db: "app" } ]
	}
)

mongo  -uapp01 -papp01 app

4、创建app数据库读写权限的用户并对test数据库具有读权限：
mongo -uroot -proot123 10.0.0.51/admin
use app
db.createUser(
{
user: "app03",
pwd: "app03",
roles: [ { role: "readWrite", db: "app" },
{ role: "read", db: "test" }
]
}
)


5、查询mongodb中的用户信息
mongo -uroot -proot123 10.0.0.51/admin
db.system.users.find().pretty()


 
6、删除用户（root身份登录，use到验证库）

删除用户
# mongo -uroot -proot123 10.0.0.51/admin
use app
db.dropUser("admin")


验证库!!!!

user:用户名
pwd:密码
roles:
    role:角色名
    db:作用对象


mongodb工具:  ops manager	监控,备份恢复,管理   EM(IE)
		
---------------------------------
mongodb复制集RS   *******

基本原理：
基本构成是1主2从的结构，自带互相监控投票机制（Raft（MongoDB）  Paxos（mysql MGR 用的是变种））
如果发生主库宕机，复制集内部会进行投票选举，选择一个新的主库替代原有主库对外提供服务。同时复制集会自动通知
客户端程序，主库已经发生切换了。应用就会连接到新的主库。
复制过程,使用的时oplog




Replcation Set配置过程详解


1、规划
	三个以上的mongodb节点（或多实例）
	多实例：
		（1）多个端口：28017、28018、28019、28020
		（2）多套目录：
mkdir -p /mongodb/28017/conf /mongodb/28017/data /mongodb/28017/log
mkdir -p /mongodb/28018/conf /mongodb/28018/data /mongodb/28018/log
mkdir -p /mongodb/28019/conf /mongodb/28019/data /mongodb/28019/log
mkdir -p /mongodb/28020/conf /mongodb/28020/data /mongodb/28020/log
		(3) 多套配置文件
			
/mongodb/28017/conf/mongod.conf
/mongodb/28018/conf/mongod.conf
/mongodb/28019/conf/mongod.conf
/mongodb/28020/conf/mongod.conf
		(4)配置文件内容
vim /mongodb/28017/conf/mongod.conf
systemLog:
  destination: file
  path: /mongodb/28017/log/mongodb.log
  logAppend: true
storage:
  journal:
    enabled: true
  dbPath: /mongodb/28017/data
  directoryPerDB: true
  #engine: wiredTiger
  wiredTiger:
    engineConfig:
      cacheSizeGB: 1
      directoryForIndexes: true
    collectionConfig:
      blockCompressor: zlib
    indexConfig:
      prefixCompression: true
processManagement:
  fork: true
net:
  port: 28017
replication:
  oplogSizeMB: 2048
  replSetName: my_repl

		

cp  /mongodb/28017/conf/mongod.conf  /mongodb/28018/conf/
cp  /mongodb/28017/conf/mongod.conf  /mongodb/28019/conf/
cp  /mongodb/28017/conf/mongod.conf  /mongodb/28020/conf/

sed 's#28017#28018#g' /mongodb/28018/conf/mongod.conf -i
sed 's#28017#28019#g' /mongodb/28019/conf/mongod.conf -i
sed 's#28017#28020#g' /mongodb/28020/conf/mongod.conf -i

------------------------------------------------------------
(5)启动多个实例备用
mongod -f /mongodb/28017/conf/mongod.conf
mongod -f /mongodb/28018/conf/mongod.conf
mongod -f /mongodb/28019/conf/mongod.conf
mongod -f /mongodb/28020/conf/mongod.conf



netstat -lnp|grep 280

2、配置复制集：
（1）1主2从，从库普通从库

mongo --port 28017 admin

config = {_id: 'my_repl', members: [
                          {_id: 0, host: '10.0.0.51:28017'},
                          {_id: 1, host: '10.0.0.51:28018'},
                          {_id: 2, host: '10.0.0.51:28019'}]
          }
          		  
rs.initiate(config) 




查询复制集状态
rs.status();

"health" : 1,           
"state" : 1,
"stateStr" : "PRIMARY",
"uptime" : 293,
"optime" : {
"ts" : Timestamp(1543821435, 1)  ----->复制集中,对于复制日志(oplog)每一个操作的唯一号码,在某个时间点运行的第几个操作



补充: 在搭建时添加arbiter节点

（2）1主1从1个arbiter

mongo -port 28017 admin

config = {_id: 'my_repl', members: [
                          {_id: 0, host: '10.0.0.51:28017'},
                          {_id: 1, host: '10.0.0.51:28018'},
                          {_id: 2, host: '10.0.0.51:28019',"arbiterOnly":true}]
          }
                   
rs.initiate(config) 


3、复制集管理操作：
（1）查看复制集状态：
rs.status();    //查看整体复制集状态
rs.isMaster(); // 查看当前是否是主节点

（2）添加删除节点
rs.remove("ip:port"); // 删除一个节点
rs.add("ip:port"); // 新增从节点
rs.addArb("ip:port"); // 新增仲裁节点

--------------------------------
添加 arbiter节点

1、连接到主节点
[mongod@db03 ~]$ mongo --port 28018 admin
2、添加仲裁节点
my_repl:PRIMARY> rs.addArb("10.0.0.51:28020")
3、查看节点状态
my_repl:PRIMARY> rs.isMaster()
{
	"hosts" : [
		"10.0.0.51:28017",
		"10.0.0.51:28018",
		"10.0.0.51:28019"
	],
	"arbiters" : [
		"10.0.0.51:28020"
	],

-------------------------------
rs.remove("ip:port"); // 删除一个节点

例子：
my_repl:PRIMARY> rs.remove("10.0.0.51:28019");
{ "ok" : 1 }
my_repl:PRIMARY> rs.isMaster()


rs.add("ip:port"); // 新增从节点
例子：
my_repl:PRIMARY> rs.add("10.0.0.51:28019")
{ "ok" : 1 }
my_repl:PRIMARY> rs.isMaster()


测试:  主节点宕机,观察复制集状态


---------------------------

注：
添加特殊节点时，
1>可以在搭建过程中设置特殊节点
2>可以通过修改配置的方式将普通从节点设置为特殊节点 
/*找到需要改为延迟性同步的数组号*/;


特殊节点：

arbiter节点：主要负责选主过程中的投票，但是不存储任何数据，也不提供任何服务
hidden节点：隐藏节点，不参与选主，也不对外提供服务。
delay节点：延时节点，数据落后于主库一段时间，因为数据是延时的，也不应该提供服务或参与选主，所以通常会配合hidden（隐藏）


一般情况下会将delay+hidden一起配置使用

（3）配置延时节点（一般延时节点也配置成hidden）
	查看所有节点的配置
	rs.conf()

"members" : [
		{
			"_id" : 0,                   --->成员号
			"host" : "10.0.0.51:28017",  --->节点信息
			"arbiterOnly" : false,       --->是否为仲裁节点
			"buildIndexes" : true,       
			"hidden" : false,			 --->是否为隐藏节点
			"priority" : 1,              ---->选主权重
			"tags" : {
				
			},
			"slaveDelay" : NumberLong(0),  --->延时的时间
			"votes" : 1
		}

在线修改配置: 
1.  将所有配置信息定义到一个变量cfg 中      
cfg=rs.conf()         

2.从[成员号]对应的成员配置信心,调取某项配置进行修改

cfg.members[3].priority=0
cfg.members[3].hidden=true
cfg.members[3].slaveDelay=120
3. 重新加载配置
rs.reconfig(cfg)    

---------------------------
取消以上配置
cfg=rs.conf() 
cfg.members[2].priority=1
cfg.members[2].hidden=false
cfg.members[2].slaveDelay=0
rs.reconfig(cfg)    

注意:如果所有节点,没有0号节点时,members[号码],不再是_id值了,要手工数一下成员的位置号(从0开始数)

--------------------------------
配置成功后，通过以下命令查询配置后的属性
rs.conf(); 
 
5、副本集其他操作命令：
--查看副本集的配置信息
admin> rs.config()
或者
admin> rs.conf()

--查看副本集各成员的状态
admin> rs.status()
++++++++++++++++++++++++++++++++++++++++++++++++
--副本集角色切换（不要人为随便操作）
admin> rs.stepDown()
注：
admin> rs.freeze(300) //锁定从，使其不会转变成主库
freeze()和stepDown单位都是秒。
+++++++++++++++++++++++++++++++++++++++++++++
--设置副本节点可读：在副本节点执行
admin> rs.slaveOk()

eg：
admin> use app
switched to db app
app> db.createCollection('a')
{ "ok" : 0, "errmsg" : "not master", "code" : 10107 }

--查看副本节点（监控主从延时）
admin> rs.printSlaveReplicationInfo()
source: 192.168.1.22:27017
	syncedTo: Thu May 26 2016 10:28:56 GMT+0800 (CST)
	0 secs (0 hrs) behind the primary
	
	
OPlog日志（备份恢复章节）



-----------------------
MongoDB Sharding Cluster (MSC) 分片集群

mongos:
1.接收用户请求,返回用户数据
2.读取config server,获取分片策略和节点信息
3.根据分片策略路由请求和获取数据
4.自动均衡数据chunk

config server :
1.存储节点信息
2.存储分片策略
3.记录数据存储的位置

mongod 
1.通过chunk(固定大小的存储单元,默认是64M),进行存储数据


chunk 自动拆分& 迁移chunks
在默认情况下(没有开启任何策略时),初始化出1个64M大小的chunk,64M被用完分裂成两个.
mongos中,提供了balancer功能,来均衡所有节点的chunk
也就是,使用Mongodb时,可以不用人为的分片,也可以达到自动分片的功能
这种功能,确实在数据量级上,是比较均衡的,而且还可以比redis分片更加灵活
删除节点时,会自动将需要删除的节点chunk迁移到其他节点.
增加节点时,会自动均衡chunk到新加节点
但是,chunk的拆分和chunk迁移,会有额外的性能消耗.chunk迁移只考虑的数据量的均衡,没有有考虑业务层面的均衡性.

所以,
可以通过调大chunk大小,减少拆分的次数,很有效的减少IO消耗,
可以预分片,来减少chunk迁移的出现


分片键选择(sharding key)



规划：
10个实例：38017-38026

（1）configserver:
3台构成的复制集（1主两从，不支持arbiter）38018-38020（复制集名字configsvr）

（2）shard节点：

sh1：38021-23    （1主两从，其中一个节点为arbiter，复制集名字sh1）
sh2：38024-26    （1主两从，其中一个节点为arbiter，复制集名字sh2）


配置过程
			
shard复制集配置：
2.1目录创建：
mkdir -p /mongodb/38021/conf  /mongodb/38021/log  /mongodb/38021/data
mkdir -p /mongodb/38022/conf  /mongodb/38022/log  /mongodb/38022/data
mkdir -p /mongodb/38023/conf  /mongodb/38023/log  /mongodb/38023/data
mkdir -p /mongodb/38024/conf  /mongodb/38024/log  /mongodb/38024/data
mkdir -p /mongodb/38025/conf  /mongodb/38025/log  /mongodb/38025/data
mkdir -p /mongodb/38026/conf  /mongodb/38026/log  /mongodb/38026/data

2.2修改配置文件：

sh1:
vi /mongodb/38021/conf/mongodb.conf 
===============
根据需求修改相应参数：
systemLog:
  destination: file
  path: /mongodb/38021/log/mongodb.log   
  logAppend: true
storage:
  journal:
    enabled: true
  dbPath: /mongodb/38021/data
  directoryPerDB: true
  #engine: wiredTiger
  wiredTiger:
    engineConfig:
      cacheSizeGB: 1
      directoryForIndexes: true
    collectionConfig:
      blockCompressor: zlib
    indexConfig:
      prefixCompression: true
net:
  port: 38021
replication:
  oplogSizeMB: 2048
  replSetName: sh1
sharding:
  clusterRole: shardsvr
processManagement: 
  fork: true

===============
cp  /mongodb/38021/conf/mongodb.conf  /mongodb/38022/conf/
cp  /mongodb/38021/conf/mongodb.conf  /mongodb/38023/conf/

sed 's#38021#38022#g' /mongodb/38022/conf/mongodb.conf -i
sed 's#38021#38023#g' /mongodb/38023/conf/mongodb.conf -i

sh2:
vi /mongodb/38024/conf/mongodb.conf 
========
根据需求修改相应参数：
systemLog:
  destination: file
  path: /mongodb/38024/log/mongodb.log   
  logAppend: true
storage:
  journal:
    enabled: true
  dbPath: /mongodb/38024/data
  directoryPerDB: true
  wiredTiger:
    engineConfig:
      cacheSizeGB: 1
      directoryForIndexes: true
    collectionConfig:
      blockCompressor: zlib
    indexConfig:
      prefixCompression: true
net:
  port: 38024
replication:
  oplogSizeMB: 2048
  replSetName: sh2
sharding:
  clusterRole: shardsvr
processManagement: 
  fork: true



cp  /mongodb/38024/conf/mongodb.conf  /mongodb/38025/conf/
cp  /mongodb/38024/conf/mongodb.conf  /mongodb/38026/conf/

sed 's#38024#38025#g' /mongodb/38025/conf/mongodb.conf -i
sed 's#38024#38026#g' /mongodb/38026/conf/mongodb.conf -i


2.3启动所有节点，并搭建复制集：

mongod -f  /mongodb/38021/conf/mongodb.conf 
mongod -f  /mongodb/38022/conf/mongodb.conf 
mongod -f  /mongodb/38023/conf/mongodb.conf 
mongod -f  /mongodb/38024/conf/mongodb.conf 
mongod -f  /mongodb/38025/conf/mongodb.conf 
mongod -f  /mongodb/38026/conf/mongodb.conf  


sh1复制集构建:
mongo --port 38021

use  admin
config = {_id: 'sh1', members: [
                          {_id: 0, host: '10.0.0.51:38021'},
                          {_id: 1, host: '10.0.0.51:38022'},
                          {_id: 2, host: '10.0.0.51:38023',"arbiterOnly":true}]
           }

rs.initiate(config)

sh2复制集构建:
 mongo --port 38024 
 use admin
config = {_id: 'sh2', members: [
                          {_id: 0, host: '10.0.0.51:38024'},
                          {_id: 1, host: '10.0.0.51:38025'},
                          {_id: 2, host: '10.0.0.51:38026',"arbiterOnly":true}]
           }
  
rs.initiate(config)






=-=----=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
3、config节点配置：

3.1目录创建：
mkdir -p /mongodb/38018/conf  /mongodb/38018/log  /mongodb/38018/data
mkdir -p /mongodb/38019/conf  /mongodb/38019/log  /mongodb/38019/data
mkdir -p /mongodb/38020/conf  /mongodb/38020/log  /mongodb/38020/data

3.2修改配置文件：

[mongod@server1 ~]$ vi /mongodb/38018/conf/mongodb.conf

systemLog:
  destination: file
  path: /mongodb/38018/log/mongodb.conf
  logAppend: true
storage:
  journal:
    enabled: true
  dbPath: /mongodb/38018/data
  directoryPerDB: true
  #engine: wiredTiger
  wiredTiger:
    engineConfig:
      cacheSizeGB: 1
      directoryForIndexes: true
    collectionConfig:
      blockCompressor: zlib
    indexConfig:
      prefixCompression: true
net:
  port: 38018
replication:
  oplogSizeMB: 2048
  replSetName: configReplSet
sharding:
  clusterRole: configsvr
processManagement: 
  fork: true


cp /mongodb/38018/conf/mongodb.conf /mongodb/38019/conf/
cp /mongodb/38018/conf/mongodb.conf /mongodb/38020/conf/

sed 's#38018#38019#g' /mongodb/38019/conf/mongodb.conf -i
sed 's#38018#38020#g' /mongodb/38020/conf/mongodb.conf -i


3.3启动节点，并配置复制集


mongod -f /mongodb/38018/conf/mongodb.conf 
mongod -f /mongodb/38019/conf/mongodb.conf 
mongod -f /mongodb/38020/conf/mongodb.conf 


mongo --port 38018
use  admin

 config = {_id: 'configReplSet', members: [
                          {_id: 0, host: '10.0.0.51:38018'},
                          {_id: 1, host: '10.0.0.51:38019'},
                          {_id: 2, host: '10.0.0.51:38020'}]
           }
rs.initiate(config)  
  
  
注：configserver 可以是一个节点，官方建议复制集。configserver不能有arbiter。
新版本中，要求必须是复制集。
注：mongodb 3.4之后，虽然要求config server为replica set，但是不支持arbiter
=============================================================================

4、mongos节点配置：
4.1创建目录：

mkdir -p /mongodb/38017/conf  /mongodb/38017/log 

4.2配置文件：


vi /mongodb/38017/conf/mongos.conf
systemLog:
  destination: file
  path: /mongodb/38017/log/mongos.log
  logAppend: true
net:
  port: 38017
sharding:
  configDB: configReplSet/10.0.0.51:38018,10.0.0.51:38019,10.0.0.51:38020
processManagement: 
  fork: true
         
4.3启动mongos

 mongos -f /mongodb/38017/conf/mongos.conf 


 5、分片集群操作：

 连接到其中一个mongos（10.0.0.51），做以下配置
（1）连接到mongs的admin数据库
# su - mongod
$ mongo 10.0.0.51:38017/admin

（2）添加分片
db.runCommand( { addshard : "sh1/10.0.0.51:38021,10.0.0.51:38022,10.0.0.51:38023",name:"shard1"} )
db.runCommand( { addshard : "sh2/10.0.0.51:38024,10.0.0.51:38025,10.0.0.51:38026",name:"shard2"} )


（3）列出分片
mongos> db.runCommand( { listshards : 1 } )
  
  
（4）整体状态查看
mongos> sh.status();
 


 
分片定制
balancer
备份恢复和迁移 
基本监控
MySQL优化









 
 